plugins {
    id 'java'
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
    id "com.palantir.revapi" version "1.7.0"
    id "biz.aQute.bnd.builder" version "$bndVersion"
    id 'org.javamodularity.moduleplugin' version '1.8.14'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    mavenLocal()
    // sonatype snapshots
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

java {
    withJavadocJar()
    withSourcesJar()

    registerFeature('groovyDsl') {
        usingSourceSet(sourceSets.main)
    }
}

sourcesJar.dependsOn ':compileModuleInfoJava'

dependencies {
    api "org.mnode.ical4j:ical4j:$ical4jVersion",
            "org.mnode.ical4j:ical4j-vcard:$ical4jVCardVersion"

    // optional groovy DSL for calendar builder..
    groovyDslImplementation "org.codehaus.groovy:groovy:$groovyVersion"

    // junit
    testImplementation "org.junit.vintage:junit-vintage-engine:$junitVintageVersion"

    // groovy-test
    testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"

    // spock
    testImplementation platform("org.spockframework:spock-bom:$spockVersion"),
            "org.spockframework:spock-core",
            "org.apache.logging.log4j:log4j-core:$log4jVersion"
}

compileTestJava {
    moduleOptions {
        compileOnClasspath = true
    }
}

test {
    moduleOptions {
        runOnClasspath = true
    }

    useJUnitPlatform()

    finalizedBy jacocoTestCoverageVerification, jacocoTestReport // Ensure Jacoco is run after tests have completed

    jvmArgs = ["-Duser.timezone=UTC"] // Some tests require default timezone to be UTC
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
            failOnViolation = false
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = jacoco_htmlReport == 'true'
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/',
                'http://ical4j.github.io/docs/ical4j/api/4.0.0-alpha6/'
    }
}

scmVersion {
    tag {
        prefix = 'ical4j-extensions-'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = ['master': 'simple']
}

group = 'org.mnode.ical4j'
description = 'Support for additional non-standard iCalendar objects'
version = scmVersion.version

jar {
    manifest {
        attributes(
                'Implementation-Title': 'iCal4j Extensions',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Ben Fortuna'
        )
    }
}

revapi {
    oldVersion = revApiOldVersion
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

publishing {
    publications {
        ical4j_extensions(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().appendNode('name', project.name)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', 'http://ical4j.github.io')

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', 'https://github.com/ical4j/ical4j-extensions')
                scmNode.appendNode('connection', 'scm:git@github.com:ical4j/ical4j-extensions.git')
                scmNode.appendNode('developerConnection', 'scm:git@github.com:ical4j/ical4j-extensions.git')

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'iCal4j - License')
                licenseNode.appendNode('url', 'https://raw.githubusercontent.com/ical4j/ical4j-extensions/master/LICENSE.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'fortuna')
                developerNode.appendNode('name', 'Ben Fortuna')
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = !isReleaseVersion ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    sign publishing.publications.ical4j_extensions
}
